/*
    функции
    шаблоны
    Пользовательские типы(  структуры, 
                            классы,
                            объединения, 
                            перечисления)
    Модули приложений

    типы модулей
        библиотеки кода
        пространства имён
        скомпилированные модули
            статические и динамические библиотеки
            отдельные исполняемые файлы
*/

/*
    Функции
    
    алгоритм работы функции
    1. быть вызванной из тела другой функции
    2. загрузить свои инструкции из "текстовой 
       памяти" программы в "стек вызовов"
    3. определить, объявить и инициализировать
       аргументы функции
    4. выполнить все свои инструкции
    5. сообщить вызывающей функции результат своей работы
    6. выгрузиться из стека вызовов

    Общий вид функции:
    тип_возврата имя(список_аргументов){тело_функции}
*/

#include <iostream>

int Summ(int a, int b) {
    int result{};// подготовка данных
    result = a + b;// алгоритм действий
    return result;// возврат значений в вызывающую функцию
}

//float Summ(float a, float b) {
//    return a + b;
//}

void SortUp(int &a, int &b) {
    if (a > b) {
        int tmp = a;
        a = b;
        b = tmp;
    }
}

//выше использовалась передвача значений по параметру
// переданные объекты - копии и их модификация не влияет
// на оригиналы

void SortUp(int *a, int *b) {
    if (*a > *b) {
        int tmp = *a;
        *a = *b;
        *b = tmp;
    }
}


int main()
{
    int *q, w, *r;

    int a{ 5 };
    int b{ 3 };
    int &ref{ a };// ссылка на переменную а

    auto res = Summ(a, 8);
    std::cout << a << " + " << b << " = " << res << '\n';
    std::cout << "Now: " << a << " then " << b << '\n';
    SortUp(a, b);
    std::cout << "Was: " << a << " then " << b << '\n';

}

/*SOLID
задачи
    1 функция нахождения большего из 2х чисел
    2 функция нахождения больего из 3х чисел
    3 процедура сортировки 2х чисел по убыванию
    4 процедура сортировки 3х чисел по возрастанию
    5 процедура сортировки 3х чисел по убыванию
    6 функция нахождения целой степени числа
    7 функция определения является ли число чётным
    8 функция определения является ли число нечётным
    9 функция нахождения факториала целого числа
    10 функция определения является ли число простым
*/

int Max(int a, int b) {
    if (a > b) {
        return a;
    }
    else {
        return b;
    }
    return (a > b) ? a : b;
}

int Max(int a, int b, int c) {
    if (a > b) {
        if (a > c) {
            return a;
        }
        else {
            return c;
        }
    }
    else {
        if (b > c){
            return b;
        }
        else {
            return c;
        }       
    }
}

void Swap(int& a, int& b) {
    int tmp = a;
    a = b;
    b = tmp;
}

void SortDown(int& a, int& b) {
    if (a < b) {
        Swap(a, b);
    }
}

void SortUp(int& a, int& b, int& c) {
    //если а не меньше b поменять их местами
    if (a > b) {
        Swap(a, b);
    }
    //если а не меньше c моменять их местами
    if (a > c) {
        Swap(a, c);
    }
    //если b не меньше c моменять их местами
    if (b > c) {
        Swap(b, c);
    }
}

void SortDown(int& a, int& b, int& c) {
    //если а не больше b поменять их местами
    if (a < b) {
        Swap(a, b);
    }
    //если а не больше c моменять их местами
    if (a < c) {
        Swap(a, c);
    }
    //если b не больше c моменять их местами
    if (b < c) {
        Swap(b, c);
    }
}

int Power(int base, int power) {
    if (power == 0) { return 1; }
    int result{base};
    int i = 1;
    while (i<power){
        result = result * base;
        i += 1;
    }
    return result;
}

bool IsOdd(int num) {
    return num % 2;
}

bool IsEven(int num) {
    if (num % 2 == 0) {
        return true;
    }
    else {
        return false;
    }
}